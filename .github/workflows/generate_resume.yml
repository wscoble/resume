name: Build and Release Resume

on:
  push:
    paths:
      - Resume/resume.yaml
      - Resume/resume.j2
      - .github/workflows/generate_resume.yml
      - devenv.nix

env:
  RESUME_NAME: Scott\ Scoble\ Resume

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Resume
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cachix/install-nix-action@v22
      - uses: cachix/cachix-action@v12
        with:
          name: devenv
      - name: Install devenv.sh
        run: nix profile install tarball+https://install.devenv.sh/latest
        shell: sh

      - run: devenv shell install-ctan-dependencies
      - run: |
          devenv shell build-resume
          pushd Resume
          mv resume.pdf "$RESUME_NAME".pdf
          mv resume.docx "$RESUME_NAME".docx
          popd

      - name: Get current version
        id: get_version
        run: echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Tag commit for release
        id: version_increment
        uses: workflow/nix-shell-action@v3
        with:
          packages: yq,coreutils
          script: |
            # Get the hash of the experience section in the current commit and the previous one
            CURRENT_HASH=$(yq '.experience' Resume/resume.yaml | sha256sum | awk '{print $1}')
            PREVIOUS_HASH=$(git show ${{ steps.get_version.outputs.version }}:Resume/resume.yaml | yq '.experience' | sha256sum | awk '{print $1}')
            
            # Get the size of the experience list in the current commit and the previous one
            CURRENT_SIZE=$(yq '.experience | length' Resume/resume.yaml)
            PREVIOUS_SIZE=$(git show ${{ steps.get_version.outputs.version }}:Resume/resume.yaml | yq '.experience | length')
            
            # Check the sizes and hashes to determine the version increment
            if [ "$CURRENT_SIZE" -ne "$PREVIOUS_SIZE" ]; then
              # If the size of the experience list has changed, increment the major version
              echo "increment=major" >> $GITHUB_OUTPUT
            elif [ "$CURRENT_HASH" != "$PREVIOUS_HASH" ]; then
              # If the hash of the experience section has changed, increment the minor version
              echo "increment=minor" >> $GITHUB_OUTPUT
            else
              # Otherwise, increment the patch version
              echo "increment=patch" >> $GITHUB_OUTPUT
            fi

      - name: Increment version
        id: increment_version
        run: |
          version=${{ steps.get_version.outputs.version }}
          increment=${{ steps.version_increment.outputs.increment }}
          IFS='.' read -ra VERSION_PARTS <<< "$version"
          case $increment in
            major)
              echo "new_version=$((${VERSION_PARTS[0]} + 1)).0.0" >> $GITHUB_OUTPUT
              ;;
            minor)
              echo "new_version=${VERSION_PARTS[0]}.$((${VERSION_PARTS[1]} + 1)).0" >> $GITHUB_OUTPUT
              ;;
            patch)
              echo "new_version=${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((${VERSION_PARTS[2]} + 1))" >> $GITHUB_OUTPUT
              ;;
          esac
          

      - name: Tag commit for release
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "${{ steps.increment_version.outputs.result }}"

      - name: Release artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            "Resume/$RESUME_NAME.pdf"
            "Resume/$RESUME_NAME.docx"